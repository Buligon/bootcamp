# -*- coding: utf-8 -*-
"""TF2.0 Linear Classification Live.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NCSGYccm5qqXIcXOoovy0mNKlZ6Jj9vT
"""

import tensorflow as tf
print(tf.__version__)

from sklearn.datasets import load_breast_cancer

data = load_breast_cancer()
data

data.keys()

type(data)

# number of samples by number os features
data.data.shape

# this means it is a binary classification problem
data.target

# check what do the 0s and 1s mean
data.target_names

# explain what the columns means
data.feature_names

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(data.data, data.target, test_size=0.33)  # test_size is the percentage of samples that go to the test

N, D = X_train.shape

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) # fit transform does fit and transform in one step, so that's why we don't use it on the test data
'''
Fit the Model: The actual process of fitting involves providing the training data to the model and letting it update its weights
through an iterative optimization process. This process aims to minimize the defined loss function by adjusting the model's parameters.
'''
X_test = scaler.transform(X_test)

model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(D,)),  # we ignore the N part because modules can take an arbitrary number of samples
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

r = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100)

print("Train score:", model.evaluate(X_train, Y_train))
print("Test score:", model.evaluate(X_test, Y_test))

"""❗
O mesmo set de dados e código sendo executado localmente retornam um resultado totalmente diferente, porém correto. Por algum motivo o Google Colab não está treinando o modelo corretamente.❗

Train score: [0.09948378056287766, 0.9842519760131836]</br>
Test score: [0.16345760226249695, 0.9468085169792175]
"""

import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val_loss')
plt.legend();

import matplotlib.pyplot as plt
plt.plot(r.history['accuracy'], label='acc')
plt.plot(r.history['val_accuracy'], label='val_acc')
plt.legend();

"""# **Part 2: Making Predictions**"""

P = model.predict(X_test)
print(P) # outputs of the sigmoid, interpreted as probabilities p(Y = 1 | X)

import numpy as np
P = np.round(P).flatten()
print(P)

print("Manually calculated accuracy:", np.mean(P == Y_test))
print("Evaluate output:", model.evaluate(X_test, Y_test))

"""# **Part 3: Saving and Loading a Model**"""

model.save('linearclassifier.h5')

!ls -lh

model = tf.keras.models.load_model('linearclassifier.h5')
print(model.layers)
model.evaluate(X_test, Y_test)
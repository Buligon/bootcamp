# -*- coding: utf-8 -*-
"""TF2 Linear Regression Live.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14_6sqUhU-oyge_qM7g9kPI2pxao1wE-U
"""

import tensorflow as tf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

!wget https://raw.githubusercontent.com/lazyprogrammer/machine_learning_examples/master/tf2.0/moore.csv

data = pd.read_csv('moore.csv', header=None).to_numpy()

X = data[:,0].reshape(-1, 1)  # making an N X D
Y = data[:,1]

plt.scatter(X, Y)

Y = np.log(Y)
plt.scatter(X, Y)

X = X - X.mean()  # making it start in zero

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(1,)),
    tf.keras.layers.Dense(1),
])

model.compile(
    optimizer=tf.keras.optimizers.SGD(0.001, 0.9),
    loss='mse',
)

def schedule(epoch, lr):
  if epoch >= 50:
    return 0.0001
  return 0.001

scheduler = tf.keras.callbacks.LearningRateScheduler(schedule)

r = model.fit(X, Y, epochs=200, callbacks=[scheduler])

plt.plot(r.history['loss'], label='loss')
plt.legend()

model.layers

model.layers[0].get_weights()

a = model.layers[0].get_weights()[0][0,0]

a

"""# **Part 2: Making Predictions**"""

Yhat = model.predict(X).flatten()
plt.scatter(X, Y)
plt.plot(X, Yhat)

# Manual calculation

w, b = model.layers[0].get_weights()

X = X.reshape(-1, 1)

Yhat2 = (X.dot(w) + b).flatten()
np.allclose(Yhat, Yhat2)